{"version":3,"sources":["Utils/Constants.js","Store/Actions.js","Components/TaskList.component.jsx","Components/ShownTask.component.jsx","Components/MobileTaskList.component.jsx","Components/MobileUI.component.jsx","Utils/Utilities.js","Store/Store.js","Components/Main.component.jsx","index.js"],"names":["Constants","ToggleForm","SetDisplayTask","GetState","Create_Task_Toggle","Create_Task_Submit","Edit_Task_Toggle","Edit_Task_Submit","Update_Status","Delete","TODO","ONGOING","DONE","FEATURE","BUG","Actions","toggle","type","TaskAction","payload","taskForm","id","shownTaskId","createTaskToggle","title","desc","editTaskToggle","status","TaskList","props","yelloBG","backgroundColor","dispatch","useDispatch","useSelector","state","taskList","tasks","style","height","overflowY","overflowX","border","borderRadius","className","fontSize","width","disabled","onClick","float","color","cursor","map","task","TaskStatus","substring","ShownTask","useState","setTitle","setDesc","find","x","shownTask","taskStyle","role","margin","value","onChange","e","target","split","item","idx","textAlign","marginTop","MobileTaskList","onClose","MobileUI","taskListToggle","setTaskListToggle","addBtnStyle","headbtnList","padding","footbtnList","marginLeft","Utilities","number","length","str","date","getFullYear","toString","this","pad","getMonth","getDate","getHours","getMinutes","getSeconds","Task","createDate","DateToString","Date","lastId","defaultState","openTasks","store","createStore","action","newState","filter","push","startDate","completeDate","MainComponent","undefined","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c84bce6d.chunk.js","sourcesContent":["\r\nclass Constants\r\n{   \r\n    static get TaskAction()\r\n    {\r\n        const TaskAction = {\r\n            ToggleForm: \"ToggleForm\",\r\n            SetDisplayTask: \"SetDisplayTask\",\r\n            GetState: \"GetState\",\r\n            Create_Task_Toggle: \"Create_Task_Toggle\",\r\n            Create_Task_Submit: \"Create_Task_Submit\",\r\n            Edit_Task_Toggle : \"Edit_Task_Toggle\",\r\n            Edit_Task_Submit: \"Edit_Task_Submit\",\r\n            Update_Status: \"Update_Status\",\r\n            Delete: \"Delete\"\r\n        };\r\n        return TaskAction;\r\n    }\r\n\r\n    static get TaskStatus()\r\n    {\r\n        const TaskStatus = {\r\n            TODO: \"TODO\",\r\n            ONGOING: \"ONGOING\",\r\n            DONE: \"DONE\"\r\n        };\r\n        return TaskStatus;\r\n    }\r\n\r\n    static get TaskType()\r\n    {\r\n        const TaskType = {\r\n            FEATURE: \"FEATURE\",\r\n            BUG: \"BUG\"\r\n        };\r\n        return TaskType;\r\n    }\r\n}\r\n\r\nexport default Constants;","\r\nimport Constants from \"../Utils/Constants\";\r\n\r\nclass Actions\r\n{\r\n    static ToggleForm(toggle) {\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.ToggleForm,\r\n            payload : {\r\n                taskForm: toggle\r\n            }\r\n        };\r\n        return action;\r\n    }\r\n    \r\n    static SetDisplayTask(id) {\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.SetDisplayTask,\r\n            payload : {\r\n                shownTaskId: id\r\n            }\r\n        };\r\n        return action;\r\n    }\r\n\r\n    static GetState() {\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.GetState,\r\n            payload : {}\r\n        };\r\n        return action;\r\n    }\r\n\r\n    static Create_Task_Toggle(createTaskToggle) {\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.Create_Task_Toggle,\r\n            payload : {\r\n                createTaskToggle: createTaskToggle\r\n            }\r\n        };\r\n        return action;\r\n    }\r\n\r\n    static Create_Task_Submit(title, desc) {\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.Create_Task_Submit,\r\n            payload : {\r\n                title: title,\r\n                desc : desc\r\n            }\r\n        };\r\n        return action;\r\n    }\r\n\r\n\r\n    static Edit_Task_Toggle(id,editTaskToggle){\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.Edit_Task_Toggle,\r\n            payload : {\r\n                shownTaskId: id,\r\n                editTaskToggle: editTaskToggle\r\n            }\r\n        };\r\n        return action;\r\n    }\r\n\r\n    static Edit_Task_Submit(id,title,desc){\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.Edit_Task_Submit,\r\n            payload : {\r\n                id: id,\r\n                title : title,\r\n                desc : desc\r\n            }\r\n        };\r\n        return action;\r\n    }\r\n    \r\n    static Update_Status(id,status){\r\n\r\n        const action = {\r\n            type : Constants.TaskAction.Update_Status,\r\n            payload : {\r\n                id: id,\r\n                status : status\r\n            }\r\n        };\r\n        return action;\r\n    }\r\n    \r\n}\r\n\r\nexport default Actions;","\r\nimport { React } from \"react\";\r\nimport { FaPlus, FaCheck } from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Actions from \"../Store/Actions\";\r\nimport Constants from \"../Utils/Constants\";\r\n\r\n\r\nconst TaskList = function(props) {\r\n    const taskListStyle = {\r\n        height:\"80vh\",\r\n        backgroundColor:\"white\",\r\n        overflowY:\"auto\",\r\n        overflowX:\"hidden\",\r\n        border: \"2px solid black\",\r\n        borderRadius:0\r\n    };\r\n\r\n    const taskStyle = {\r\n        color:\"black\",\r\n        fontSize:\"20px\",\r\n        cursor:\"pointer\"\r\n    }\r\n    const addBtnStyle = {\r\n        fontSize: \"20px\",\r\n        width:\"100%\"\r\n    };\r\n    \r\n\r\n    let yelloBG = {backgroundColor:\"yellow\"}\r\n\r\n    const dispatch = useDispatch();\r\n    const shownTaskId = useSelector(state => state.shownTaskId);\r\n    const taskList = useSelector(state => state.tasks);\r\n\r\n    const editTaskToggle = useSelector(state => state.editTaskToggle);\r\n    const createTaskToggle = useSelector(state => state.createTaskToggle);\r\n\r\n    return  <div style={taskListStyle}>\r\n                <button className=\"btn btn-primary\" \r\n                    style={{...addBtnStyle, borderRadius:0}}  disabled={editTaskToggle || createTaskToggle }\r\n                    onClick={()=> dispatch(Actions.Create_Task_Toggle(true))} > \r\n                        Add new task  \r\n                    <span style={{float:\"right\"}}> <FaPlus/> </span> \r\n                </button>\r\n\r\n                <ul className=\"list-group\" style={taskStyle}>\r\n                    {taskList.map((task) => (\r\n\r\n                        <li key={task.id} \r\n                            className={task.status === Constants.TaskStatus.DONE? \"list-group-item list-group-item-success\":\"list-group-item \"} \r\n                            style={task.id==shownTaskId ? yelloBG : {}} \r\n                            disabled={editTaskToggle || createTaskToggle }\r\n                            onClick = {() => {\r\n                                if(!editTaskToggle && !createTaskToggle)\r\n                                    dispatch(Actions.SetDisplayTask(task.id))}\r\n                             } >\r\n                            { task.title.substring(0,16) } \r\n                            {   task.status === Constants.TaskStatus.DONE &&\r\n                                <span style={{float:\"right\"}}> <FaCheck/> </span>\r\n                            } \r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>;\r\n}\r\n\r\nexport default TaskList;","\nimport { React } from \"react\";\nimport Constants from \"../Utils/Constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Actions from \"../Store/Actions\";\nimport { useState } from \"react\";\n\n\nconst ShownTask = (props) => {\n    const [title, setTitle] = useState(\"\");\n    const [desc, setDesc] = useState(\"\");\n\n    const task = useSelector(state => state.tasks.find(x =>x.id == state.shownTaskId));\n\n    const editTaskToggle = useSelector(state => state.editTaskToggle);\n    const createTaskToggle = useSelector(state => state.createTaskToggle);\n    useSelector(state => {\n        const shownTask = state.tasks.find(x =>x.id == state.shownTaskId);\n        if (shownTask) return shownTask.status;\n        else return \"\";\n    });\n    \n    const dispatch = useDispatch();\n\n    const taskStyle = {\n        height:\"80vh\",\n        backgroundColor:\"white\",\n        color:\"black\",\n        overflowY:\"auto\",\n        overflowX:\"hidden\",\n        border: \"2px solid black\"\n    };\n\n    const noTaskStyle = {\n        textAlign:\"center\", \n        marginTop:\"20%\",\n        fontSize: \"22px\"\n    }\n\n    if(createTaskToggle) {\n        return  <div style={taskStyle}>\n\n                    <div className=\"modal-dialog \" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div key=\"modal-header\" className=\"modal-header row\">\n                                <h5 className=\"modal-title col-2\" style={{margin:\"auto\"}}> Title: </h5>\n                                <input className=\"col-10\" type=\"text\" value={title} onChange={e => setTitle(e.target.value)} />\n                            </div>\n                            <div key=\"modal-body\" className=\"modal-body\" style={{height: \"320px\", overflowY:\"auto\"}}>\n                                <h5 className=\"modal-title\" style={{margin:\"auto\"}}> Description: </h5>\n                             \n                                <textarea value={desc} style={{height: \"250px\", width:\"100%\",overflowY:\"auto\"}} onChange={e => setDesc(e.target.value)} />\n                            </div>\n                                <li className=\"list-group-item list-group-item-success\">\n                                    <b>Status: </b> Not Created\n                                </li>\n                            <div key=\"modal-footer\" className=\"modal-footer\">\n                                <button\n                                    type=\"button\" className=\"btn btn-danger\" style={{width: \"48%\"}} \n                                    onClick={() => {\n                                        dispatch(Actions.Create_Task_Toggle(false));\n                                        setTitle(\"\");\n                                        setDesc(\"\");\n                                    }} > \n                                    Cancel new task \n                                </button>\n                                <button\n                                    type=\"button\" className=\"btn btn-success\" style={{width: \"48%\"}} \n                                    onClick={() => {\n                                        dispatch(Actions.Create_Task_Submit(title, desc));\n                                        dispatch(Actions.Create_Task_Toggle(false));\n                                        setTitle(\"\");\n                                        setDesc(\"\");\n                                    }} > \n                                    Confirm new task\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>;\n    }\n    if(task) {\n        if(editTaskToggle) {\n            return  <div style={taskStyle}>\n\n                        <div className=\"modal-dialog \" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div key=\"modal-header\" className=\"modal-header row\">\n                                    <h5 className=\"modal-title col-2\" style={{margin:\"auto\"}}> Title: </h5>\n                                    <input className=\"col-10\" type=\"text\" value={title} onChange={e => setTitle(e.target.value)} />\n                                </div>\n                                <div key=\"modal-body\" className=\"modal-body\" style={{height: \"320px\", overflowY:\"auto\"}}>\n                                    <h5 className=\"modal-title\" style={{margin:\"auto\"}}> Description: </h5>\n                                 \n                                    <textarea value={desc} style={{height: \"250px\", width:\"100%\",overflowY:\"auto\"}} onChange={e => setDesc(e.target.value)} />\n                                </div>\n                                    <li className=\"list-group-item list-group-item-success\">\n                                        <b>Status: </b> {task.status}\n                                    </li>\n                                <div key=\"modal-footer\" className=\"modal-footer\">\n                                    <button\n                                        type=\"button\" className=\"btn btn-danger\" style={{width: \"48%\"}} \n                                        onClick={() => {\n                                            dispatch(Actions.Edit_Task_Toggle(task.id, false));\n                                            setTitle(\"\");\n                                            setDesc(\"\");\n                                        }} > \n                                        Cancel edit\n                                    </button>\n                                    <button\n                                        type=\"button\" className=\"btn btn-success\" style={{width: \"48%\"}} \n                                        onClick={() => {\n                                            dispatch(Actions.Edit_Task_Submit(task.id, title, desc));\n                                            dispatch(Actions.Edit_Task_Toggle(task.id, false));\n                                            setTitle(\"\");\n                                            setDesc(\"\");\n                                        }} > \n                                        Confirm edit\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>;\n        }\n        else\n        {\n            return  <div style={taskStyle}>\n\n                        <div className=\"modal-dialog \" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div key=\"modal-header\" className=\"modal-header\">\n                                    <h3 className=\"modal-title\" style={{margin:\"auto\"}}> {task.title} </h3> \n                                </div>\n                                <div key=\"modal-body\" className=\"modal-body\" style={{height: \"320px\", overflowY:\"auto\"}}>\n                                    {\n                                        task.desc.split(\"\\n\").map(function(item, idx) {\n                                            return (\n                                                <span key={idx}>\n                                                    {item}\n                                                    <br/>\n                                                </span>\n                                            )\n                                        })\n                                    }\n                                </div>\n                                    <li className=\"list-group-item list-group-item-success\">\n                                        <b>Status: </b> {task.status}\n                                    </li>\n                                <div key=\"modal-footer\" className=\"modal-footer\">\n                                    <button\n                                        type=\"button\" className=\"btn btn-danger\" style={{width: \"48%\"}} \n                                        onClick={() => {\n                                            setTitle(task.title);\n                                            setDesc(task.desc);\n                                            dispatch(Actions.Edit_Task_Toggle(task.id, true));\n                                        }} > \n                                        Edit Task\n                                    </button>\n                                    {\n                                        task.status==Constants.TaskStatus.TODO &&\n                                        <button\n                                            type=\"button\" className=\"btn btn-success\" style={{width: \"48%\"}} \n                                            onClick={() => dispatch(Actions.Update_Status(task.id, Constants.TaskStatus.ONGOING))} > \n                                            Start Task\n                                        </button>\n                                    }\n                                    {\n                                        task.status==Constants.TaskStatus.ONGOING &&\n                                        <button\n                                            type=\"button\" className=\"btn btn-success\" style={{width: \"48%\"}} \n                                            onClick={() => dispatch(Actions.Update_Status(task.id, Constants.TaskStatus.DONE))}  > \n                                            Mark as Done\n                                        </button>\n                                    }\n                                    {\n                                        task.status==Constants.TaskStatus.DONE &&\n                                        <button\n                                            type=\"button\" className=\"btn btn-success\" style={{width: \"48%\"}} \n                                            onClick={() => dispatch(Actions.Update_Status(task.id, Constants.TaskStatus.TODO))}  > \n                                            Re Open\n                                        </button>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>;\n        }\n    }\n    else {\n        return  <div style={taskStyle}>\n                    <div style={noTaskStyle} >Open up a Task from the task List</div>\n                </div>\n    }\n\n}\n\nexport default ShownTask;","\nimport { React } from \"react\";\nimport { FaPlus, FaCheck } from \"react-icons/fa\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Actions from \"../Store/Actions\";\nimport Constants from \"../Utils/Constants\";\n\n\nconst MobileTaskList = function(props) {\n    const taskListStyle = {\n        height:\"80vh\",\n        backgroundColor:\"white\",\n        overflowY:\"auto\",\n        overflowX:\"hidden\",\n        border: \"2px solid black\",\n        borderRadius:0\n    };\n\n    const taskStyle = {\n        color:\"black\",\n        fontSize:\"20px\",\n        cursor:\"pointer\"\n    }\n    const addBtnStyle = {\n        fontSize: \"20px\",\n        width:\"100%\"\n    };\n    \n\n    let yelloBG = {backgroundColor:\"yellow\"}\n\n    const dispatch = useDispatch();\n    const shownTaskId = useSelector(state => state.shownTaskId);\n    const taskList = useSelector(state => state.tasks);\n\n    const editTaskToggle = useSelector(state => state.editTaskToggle);\n    const createTaskToggle = useSelector(state => state.createTaskToggle);\n\n    return  <div style={taskListStyle}>\n                <button className=\"btn btn-primary\" \n                    style={{...addBtnStyle, borderRadius:0}}  disabled={editTaskToggle || createTaskToggle }\n                    onClick={()=> dispatch(Actions.Create_Task_Toggle(true))} > \n                        Add new task  \n                    <span style={{float:\"right\"}}> <FaPlus/> </span> \n                </button>\n\n                <ul className=\"list-group\" style={taskStyle}>\n                    {taskList.map((task) => (\n\n                        <li key={task.id} \n                            className={task.status === Constants.TaskStatus.DONE? \"list-group-item list-group-item-success\":\"list-group-item \"} \n                            style={task.id==shownTaskId ? yelloBG : {}} \n                            disabled={editTaskToggle || createTaskToggle }\n                            onClick = {() => {\n                                dispatch(Actions.SetDisplayTask(task.id));\n                                props.onClose();\n                             }} >\n                            { task.title.substring(0,16) } \n                            {   task.status === Constants.TaskStatus.DONE &&\n                                <span style={{float:\"right\"}}> <FaCheck/> </span>\n                            } \n                        </li>\n                    ))}\n                </ul>\n            </div>;\n}\n\nexport default MobileTaskList;","\nimport { React } from \"react\";\nimport Constants from \"../Utils/Constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaPlus, FaCheck, FaList } from \"react-icons/fa\";\nimport Actions from \"../Store/Actions\";\nimport { useState } from \"react\";\nimport MobileTaskList from \"./MobileTaskList.component\";\n\n\nconst MobileUI = (props) => {\n    const [taskListToggle, setTaskListToggle] = useState(false);\n\n    const [title, setTitle] = useState(\"\");\n    const [desc, setDesc] = useState(\"\");\n\n    const task = useSelector(state => state.tasks.find(x =>x.id == state.shownTaskId));\n\n    const editTaskToggle = useSelector(state => state.editTaskToggle);\n    const createTaskToggle = useSelector(state => state.createTaskToggle);\n    useSelector(state => {\n        const shownTask = state.tasks.find(x =>x.id == state.shownTaskId);\n        if (shownTask) return shownTask.status;\n        else return \"\";\n    });\n    \n    const dispatch = useDispatch();\n\n    const taskStyle = {\n        height:\"82vh\",\n        backgroundColor:\"white\",\n        color:\"black\",\n        overflowY:\"auto\",\n        overflowX:\"hidden\",\n        border: \"2px solid black\"\n    };\n\n    const noTaskStyle = {\n        textAlign:\"center\", \n        marginTop:\"20%\",\n        fontSize: \"22px\"\n    };\n\n    const taskListStyle = {\n        height:\"80vh\",\n        backgroundColor:\"white\",\n        overflowY:\"auto\",\n        overflowX:\"hidden\",\n        border: \"2px solid black\",\n        borderRadius:0\n    };\n\n    const addBtnStyle = {\n        fontSize:\"18px\",\n        width:\"100%\"\n    };\n\n    let headbtnList = {\n        padding:\"0\",\n        width:\"49%\"\n    };\n    let footbtnList = {\n        width:\"48%\"\n    };\n    if(props.width < 576) {    \n        headbtnList.width = \"98%\";\n        footbtnList.width = \"98%\";\n    }\n    if(taskListToggle) {\n        return <MobileTaskList onClose={()=> setTaskListToggle(false)}  />\n    }\n    if(createTaskToggle) {\n        return  <div style={taskStyle}>\n\n                    <div className=\"modal-dialog \" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div key=\"modal-header\" className=\"modal-header row\">\n                                <h5 className=\"modal-title col-2\" style={{margin:\"auto\"}}> Title: </h5>\n                                <input className=\"col-10\" type=\"text\" value={title} onChange={e => setTitle(e.target.value)} />\n                            </div>\n                            <div key=\"modal-body\" className=\"modal-body\" style={{height: \"320px\", overflowY:\"auto\"}}>\n                                <h5 className=\"modal-title\" style={{margin:\"auto\"}}> Description: </h5>\n                             \n                                <textarea value={desc} style={{height: \"250px\", width:\"100%\",overflowY:\"auto\"}} onChange={e => setDesc(e.target.value)} />\n                            </div>\n                            <li className=\"list-group-item list-group-item-success\">\n                                <b>Status: </b> Not Created\n                            </li>\n                            <div key=\"modal-footer\" className=\"modal-footer\">\n                                <button\n                                    type=\"button\" className=\"btn btn-danger\" style={footbtnList}\n                                    onClick={() => {\n                                        dispatch(Actions.Create_Task_Toggle(false));\n                                        setTitle(\"\");\n                                        setDesc(\"\");\n                                    }} > \n                                    Cancel new task \n                                </button>\n                                <button\n                                    type=\"button\" className=\"btn btn-success\" style={footbtnList}\n                                    onClick={() => {\n                                        dispatch(Actions.Create_Task_Submit(title, desc));\n                                        dispatch(Actions.Create_Task_Toggle(false));\n                                        setTitle(\"\");\n                                        setDesc(\"\");\n                                    }} > \n                                    Confirm new task\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>;\n    }\n    if(task) {\n        if(editTaskToggle) {\n            return  <div style={taskStyle}>\n\n                        <div className=\"modal-dialog \" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div key=\"modal-header\" className=\"modal-header row\">\n                                    <h5 className=\"modal-title col-2\" style={{margin:\"auto\"}}> Title: </h5>\n                                    <input className=\"col-10\" type=\"text\" value={title} onChange={e => setTitle(e.target.value)} />\n                                </div>\n                                <div key=\"modal-body\" className=\"modal-body\" style={{height: \"320px\", overflowY:\"auto\"}}>\n                                    <h5 className=\"modal-title\" style={{margin:\"auto\"}}> Description: </h5>\n                                 \n                                    <textarea value={desc} style={{height: \"250px\", width:\"100%\",overflowY:\"auto\"}} onChange={e => setDesc(e.target.value)} />\n                                </div>\n                                    <li className=\"list-group-item list-group-item-success\">\n                                        <b>Status: </b> {task.status}\n                                    </li>\n                                <div key=\"modal-footer\" className=\"modal-footer\">\n                                    <button\n                                        type=\"button\" className=\"btn btn-danger\" style={footbtnList}\n                                        onClick={() => {\n                                            dispatch(Actions.Edit_Task_Toggle(task.id, false));\n                                            setTitle(\"\");\n                                            setDesc(\"\");\n                                        }} > \n                                        Cancel edit\n                                    </button>\n                                    <button\n                                        type=\"button\" className=\"btn btn-success\" style={footbtnList}\n                                        onClick={() => {\n                                            dispatch(Actions.Edit_Task_Submit(task.id, title, desc));\n                                            dispatch(Actions.Edit_Task_Toggle(task.id, false));\n                                            setTitle(\"\");\n                                            setDesc(\"\");\n                                        }} > \n                                        Confirm edit\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>;\n        }\n        else\n        {\n            return  <div style={{...taskStyle, padding:\"10px\"}}>\n\n                        <div  style={{marginTop:\"20px\"}}>\n                            <div className=\"row\" style={{ marginLeft:\"0px\"}}>\n\n                                <li className=\"list-group-item\" style={headbtnList} >\n                                    <button className=\"btn btn-info\" \n                                            style={{...addBtnStyle, borderRadius:0}} \n                                            onClick={()=> setTaskListToggle(true)} > \n                                                 Task List \n                                            <span style={{float:\"right\"}}> <FaList/> </span> \n                                    </button>\n                                   \n                                </li>\n                                <li className=\"list-group-item \" style={headbtnList}  >\n                                    \n                                    <button className=\"btn btn-primary\" \n                                            style={{...addBtnStyle, borderRadius:0}} \n                                            onClick={()=> dispatch(Actions.Create_Task_Toggle(true))} > \n                                                Add new task  \n                                            <span style={{float:\"right\"}}> <FaPlus/> </span> \n                                    </button>\n                                </li>\n                            </div>\n                            \n                            <div className=\"modal-content\">\n                                <div key=\"modal-header\" className=\"modal-header\">\n                                    <h3 className=\"modal-title\" style={{margin:\"auto\"}}> {task.title} </h3> \n                                </div>\n                                <div key=\"modal-body\" className=\"modal-body\" style={{height: \"320px\", overflowY:\"auto\"}}>\n                                    {\n                                        task.desc.split(\"\\n\").map(function(item, idx) {\n                                            return (\n                                                <span key={idx}>\n                                                    {item}\n                                                    <br/>\n                                                </span>\n                                            )\n                                        })\n                                    }\n                                </div>\n                                <li className=\"list-group-item list-group-item-success\">\n                                    <b>Status: </b> {task.status}\n                                </li>\n                                <div key=\"modal-footer\" className=\"modal-footer\" style={{padding:\"0\"}} >\n                                    <button\n                                        type=\"button\" className=\"btn btn-danger \" style={footbtnList}\n                                        onClick={() => {\n                                            setTitle(task.title);\n                                            setDesc(task.desc);\n                                            dispatch(Actions.Edit_Task_Toggle(task.id, true));\n                                        }} > \n                                        Edit Task\n                                    </button>\n                                    {\n                                        task.status==Constants.TaskStatus.TODO &&\n                                        <button\n                                            type=\"button\" className=\"btn btn-success\" style={footbtnList}\n                                            onClick={() => dispatch(Actions.Update_Status(task.id, Constants.TaskStatus.ONGOING))} > \n                                            Start Task\n                                        </button>\n                                    }\n                                    {\n                                        task.status==Constants.TaskStatus.ONGOING &&\n                                        <button\n                                            type=\"button\" className=\"btn btn-success\" style={footbtnList}\n                                            onClick={() => dispatch(Actions.Update_Status(task.id, Constants.TaskStatus.DONE))}  > \n                                            Mark as Done\n                                        </button>\n                                    }\n                                    {\n                                        task.status==Constants.TaskStatus.DONE &&\n                                        <button\n                                            type=\"button\" className=\"btn btn-success\" style={footbtnList}\n                                            onClick={() => dispatch(Actions.Update_Status(task.id, Constants.TaskStatus.TODO))}  > \n                                            Re Open\n                                        </button>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>;\n        }\n    }\n    else {\n        return  <div style={{...taskStyle, padding:\"10px\"}}>\n                    <div  style={{marginTop:\"20px\"}}>\n                        <div className=\"row\" style={{ marginLeft:\"0px\"}}>\n\n                            <li className=\"list-group-item\" style={headbtnList} >\n                                <button className=\"btn btn-info\" \n                                        style={{...addBtnStyle, borderRadius:0}} \n                                        onClick={()=> setTaskListToggle(true)} > \n                                            Task List \n                                        <span style={{float:\"right\"}}> <FaList/> </span> \n                                </button>\n                            \n                            </li>\n                            <li className=\"list-group-item \" style={headbtnList}  >\n                                \n                                <button className=\"btn btn-primary\" \n                                        style={{...addBtnStyle, borderRadius:0}} \n                                        onClick={()=> dispatch(Actions.Create_Task_Toggle(true))} > \n                                            Add new task  \n                                        <span style={{float:\"right\"}}> <FaPlus/> </span> \n                                </button>\n                            </li>\n                        </div>\n                        </div>\n                    <div style={noTaskStyle} >Open up a Task from the task List</div>\n                </div>\n    }\n\n}\n\nexport default MobileUI;","\r\n\r\nclass Utilities\r\n{\r\n\t\t\r\n\tstatic pad(number, length) \r\n\t{\r\n\t\tvar str = '' + number;\r\n\t\twhile (str.length < length) {\r\n\t\t\tstr = '0' + str;\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n\r\n\tstatic DateToString(date) \r\n\t{\r\n\t\tvar yyyy = date.getFullYear().toString();\r\n\t\tvar MM = this.pad(date.getMonth() + 1,2);\r\n\t\tvar dd = this.pad(date.getDate(), 2);\r\n\t\tvar hh = this.pad(date.getHours(), 2);\r\n\t\tvar mm = this.pad(date.getMinutes(), 2)\r\n\t\tvar ss = this.pad(date.getSeconds(), 2)\r\n\r\n\t\treturn yyyy + MM + dd+  hh + mm + ss;\r\n\t}\r\n\r\n\t\r\n}\r\n\r\nexport default Utilities;\r\n","import { createStore } from \"redux\";\r\nimport Constants from \"../Utils/Constants\";\r\nimport Utilities from \"../Utils/Utilities\";\r\nimport Actions from \"../Store/Actions\";\r\n\r\nfunction Task(id, title, desc=\"\")\r\n{\r\n    this.id = id;\r\n    this.title = title;\r\n    this.desc = desc;\r\n    this.status = Constants.TaskStatus.TODO;\r\n    this.createDate = Utilities.DateToString(new Date());\r\n}\r\n\r\nlet lastId = 0;\r\nconst defaultState = {tasks:[], openTasks:[], shownTaskId:-1};\r\n\r\nfunction reducer(state = defaultState, action) \r\n{\r\n    switch(action.type) \r\n    {\r\n        case Constants.TaskAction.ToggleForm: {\r\n            let newState = {...state};\r\n            newState.taskForm = action.payload.taskForm;\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            return newState;\r\n        }\r\n\r\n        case Constants.TaskAction.SetDisplayTask: {\r\n            let newState = {...state};\r\n            newState.shownTaskId = action.payload.shownTaskId;\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            return newState;\r\n        }\r\n\r\n        case Constants.TaskAction.GetState: {\r\n            let newState = {...state};\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            return newState;\r\n        }\r\n\r\n        case Constants.TaskAction.Create_Task_Toggle: {\r\n            let newState = {...state};\r\n            newState.shownTaskId = -1;\r\n            newState.editTaskToggle = false;\r\n            newState.createTaskToggle = action.payload.createTaskToggle;\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            \r\n            return newState;\r\n        }\r\n\r\n        case Constants.TaskAction.Create_Task_Submit: {\r\n            let newState = {...state};\r\n            lastId += 1;\r\n            newState.shownTaskId = lastId;\r\n            let task =  new Task(lastId, action.payload.title, action.payload.desc)\r\n            newState.tasks.push(task);\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n\r\n            return newState;\r\n        }\r\n        \r\n        case Constants.TaskAction.Edit_Task_Toggle : {\r\n            let newState = {...state};\r\n            newState.shownTaskId = action.payload.shownTaskId;\r\n            newState.editTaskToggle = action.payload.editTaskToggle;\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            \r\n            return newState;\r\n        }\r\n\r\n        case Constants.TaskAction.Edit_Task_Submit : {\r\n            let newState = {...state};\r\n            newState.tasks = [...state.tasks];\r\n            newState.openTasks = [...state.openTasks];\r\n\r\n            let task =  newState.tasks.find(x => x.id == action.payload.id);\r\n            task.title = action.payload.title;\r\n            task.desc = action.payload.desc;\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            \r\n            return newState;\r\n        }\r\n        \r\n        case Constants.TaskAction.Update_Status : {\r\n            let newState = {...state};\r\n            newState.tasks = [...state.tasks];\r\n            newState.openTasks = [...state.openTasks];\r\n\r\n            let task =  newState.tasks.find(x => x.id == action.payload.id);\r\n            task.status = action.payload.status;\r\n\r\n            if(task.status == Constants.TaskStatus.ONGOING) {\r\n                task.startDate = Utilities.DateToString(new Date());\r\n                task.completeDate = \"\";\r\n            }\r\n            else if(task.status == Constants.TaskStatus.DONE) {\r\n                task.completeDate = Utilities.DateToString(new Date());\r\n            }\r\n    \r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            \r\n            return newState;\r\n        }\r\n\r\n        case Constants.TaskAction.Delete : {\r\n            let newState = {...state};\r\n            newState.tasks =  newState.tasks.filter(x => x.id != action.payload.id);\r\n            newState.openTasks = newState.tasks.filter(x => x.status != Constants.TaskStatus.DONE);\r\n            \r\n            return newState;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nconst store  = createStore(reducer);\r\nexport default store;\r\n\r\n\r\n\r\n//REMOVE below Code\r\nstore.dispatch(Actions.Create_Task_Submit(\"Play cricket\",\"Go to the school ground. \\n Invite friends and play cricket. \\n Then win it!\"));\r\nstore.dispatch(Actions.Update_Status(1,Constants.TaskStatus.DONE));\r\n\r\nstore.dispatch(Actions.Create_Task_Submit(\"Play football\",\"Call Steve for football match. \\n Set a time to play football. \\n Tthen win it!\"));","\r\nimport { React, useState, useEffect } from \"react\";\r\nimport { IconName , FaPlus } from \"react-icons/fa\";\r\nimport Constants from \"../Utils/Constants\";\r\nimport TaskList from \"./TaskList.component\";\r\nimport ShownTask from \"./ShownTask.component\";\r\nimport MobileUI from \"./MobileUI.component\";\r\nimport store from \"../Store/Store\";\r\nimport { connect } from \"react-redux\";\r\nimport Actions from \"../Store/Actions\";\r\n\r\n\r\nfunction MainComponent(props)\r\n{\r\n    const {width , height} = useWindowSize();\r\n    \r\n    if(width < 786)\r\n    {\r\n        return  <div className=\"main\">\r\n                    <div className=\"header\">\r\n                        <h3>Task Manager</h3> \r\n                    </div>\r\n                    <div className=\"row data\">\r\n                        <div className=\"col-12\">\r\n                            <MobileUI width={width} />\r\n                        </div>\r\n                    </div>\r\n                </div>;\r\n        \r\n    }\r\n    else {\r\n        return  <div className=\"main\">\r\n                    <div className=\"header\">\r\n                        <h3>Task Manager</h3> \r\n                    </div>\r\n                    <div className=\"row data\">\r\n                        <div className=\"col-4\">\r\n                            <TaskList/>\r\n                        </div>\r\n                        <div className=\"col-8\">\r\n                            <ShownTask/>\r\n                        </div>\r\n                    </div>\r\n                </div>;\r\n\r\n    }\r\n}\r\n\r\n// Custom Hook\r\nfunction useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState({\r\n            width: undefined,\r\n            height: undefined,\r\n        });\r\n        \r\n    useEffect(() => {\r\n            function handleResize() {\r\n                setWindowSize({\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight,\r\n                });\r\n        }\r\n        \r\n        window.addEventListener(\"resize\", handleResize);\r\n        handleResize();\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowSize;\r\n}\r\n\r\n\r\nexport default MainComponent; \r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainComponent from './Components/Main.component';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport store from './Store/Store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store} >\n    <MainComponent />\n  </Provider>,\n  \n  document.getElementById('root')\n);"],"sourceRoot":""}